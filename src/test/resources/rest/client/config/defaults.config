/*
Specifies default configuration overrides to use for all the api calls to this host. Each resource may then override
 parts as needed. Everything here is specified in Groovy's ConfigSlurper syntax.
 Loaded by the RestAPI when a new instance is created for the host specified in the parent directory name.
For example,
<code>
def api = new RestAPI("http://www.spidamin.com/calcdb", new GenericHttpClient())
</code>
will cause the api to look in the directory:
Sytem.getProperty("spidasoftware.rest.client.config.dir") + '/www.spidamin.com'
 it will load the file defaults.groovy for the api defaults.

 You may override the defaults either in part or in whole

 */

import com.spidasoftware.schema.client.rest.RestClientException
import net.sf.json.JSON
import net.sf.json.JSONObject
import net.sf.json.JSONSerializer
import org.apache.http.util.EntityUtils

/*
get's called immediately after getting the response from the server
response here will be an instance of org.apache.http.HttpResponse
the default implementation, will return a JSONObject with the status code and the parsed body
*/
doWithResponse = {response ->
	"overridden doWithResponse Closure"
}


/**
 * These get called with the result from doWithResponse.
 * Default implementations don't do anything, but these can easily be overridden in
 * the defaults and/or each individual resource to give fine grained control over
 * how responses are handled.
 */
doWithSaveResult = { return it }
doWithFindResult = { return it }
doWithListResult = { return it }
doWithUpdateResult = { return it }
doWithDeleteResult = { return it }

headers = ["Accept": "customOverrideValue"]

/*
Another possible value is additionalParams
this is simply a map that gets merged with the
parameters passed into the RestAPIResource rest methods.
The parameters passed into the method will always take precedence.
The most likely use is for an api token, so that you don't have to
put it in every single request:

additionalParams = ["apiToken":"1234567890abcdef"]

Typically, this would not be known until runtime, so it would
be set later like:

api.defaults.additionalParams = [ <whatever>: <whatever> ]
or
api.whateverResource.additionalParams = ...

You can put it in a defaults file if you really want to, though.
*/